# tmux.conf, copypasta smorgasbord
#
# Smart people don't just add whipping cream to things and see what happens.
#
# TODO
#
# consider mouse mode and mouse mode settings
#
# No. 1 thing --> display only active pane directory not program in status bar!
#
# Get C-4 and C-Tab and C-S-Tab to jive with vim-tmux-navigator
#
# In copy-mode, quit-and-go-to-previous-pane
#
# How do I break off a window into a new session?
#
# Window indexing in prefix-W is still 0-indexed
#
# Tmux version-sensitive config options (with if-shell, but difficult to use)
#
# Why are my term colors all monkeyed up on ssh'd tmux sessions?
#
# Execute command in all panes in window
#
# Could I hook z so that it renames my tmux window?
#
# Try to remove as many M-<key> binding as possible so as not to lose standard shortcuts
# Few to none Meta bindings (z, s, and v are too useful, surrey emacs), but Meta-shift and Meta-Control might be okay
#
# zsh has directory aliases, could I detect and rename windows after cd automatically to their aliases?
#
# Is there way to compact windows when you get lika 1, 2, 4, 6 and want 1, 2, 3, 4 ?
#
# Grab pane from other window into this window
# Bring Window 2 into pane in window 1; split pane in window 1 into new window
# Move pane from this window into other window
#
# I'd like to check that a tmux pane contains the repl I expect before passing a cmd
#
# Figure out moving panes between windows
#
# Reattach needs to be not called when not on a Mac
#
# Alias for open directory in new window


#############
# tmux basics
#############

# unbind default prefix key (conflicts with vim)
unbind C-b

# set prefix key to ctrl-a
set -g prefix C-a
set -g prefix2 C-Space

# pass through a ctrl-a if you press it twice
bind C-a send-prefix
bind a last-window

# start first window and pane at 1, not zero (the keyboard is not semantic)
# Q: Which of these pairs is more correct?

set -g base-index 1
set -g pane-base-index 1

set-window-option -g base-index 1
set-window-option -g pane-base-index 1

# I think this is for shift and control arrows
set-option -gw xterm-keys on

# TRUECOLOR
#set-option -ga terminal-overrides ",xterm-256color:Tc"

# guicursor (not sure if really desirable)
# set -ga terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'

# set-option destroy-unattached

######################
# Things from sensible
######################
#
# I am disabling plugins because they are malfunctioning.
# I think they do not keep pace with tmux versions.

setw -g mode-keys vi
set -g status-keys emacs

set -s escape-time 0
set -g history-limit 50000
set -g display-time 4000
set -g status-interval 5

# Still necessary on Macs
set -g default-command "reattach-to-user-namespace -l $SHELL"

set -g default-terminal "screen-256color"
set -g focus-events on
setw -g aggressive-resize on

bind-key R source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"

bind C-p previous-window
bind C-n next-window

################
# Copy and paste
################

# TODO: fix up this section, not that you use these keybindings anyway

# bind-key -t vi-copy 'v' begin-selection
# bind-key -t vi-copy 'y' copy-selection

# This stopped(?) working
# bind-key -t vi-copy Tab "select-pane -l"

####################
# Session management
####################

bind C-s choose-session

###################
# Window management
###################

# For older TMUX, try :%s/#{pane_current_path}/$PWD/g

# This is way too long, how do we get everything after the slash?
# set -g automatic-rename-format '#{pane_current_path}'

# This is annoying
set-option -g allow-rename off

bind C-w choose-window

# c  create window
bind c neww -c "#{pane_current_path}"
bind -n C-M-c neww -c "#{pane_current_path}"

# n  next window
bind -n C-M-n next-window

# p  previous window
bind -n C-M-p previous-window

# TODO: either kill these or escape them so you can use prefix M-1 in nested sessions
# This clashes with Spacemacs but it's so useful
bind -n M-1 select-window -t 1
bind -n M-2 select-window -t 2
bind -n M-3 select-window -t 3
bind -n M-4 select-window -t 4
bind -n M-5 select-window -t 5
bind -n M-6 select-window -t 6
bind -n M-7 select-window -t 7
bind -n M-8 select-window -t 8
bind -n M-9 select-window -t 9
bind -n M-0 select-window -t 10

bind -n M-\ last-window

# vertical split (as per vim)
bind % split-window -h -c "#{pane_current_path}"
bind | split-window -h -c "#{pane_current_path}"
unbind v
bind v split-window -h -c "#{pane_current_path}"
bind -n M-v split-window -h -c "#{pane_current_path}"

# horizontal split (as per vim)
bind "\"" split-window -v -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
unbind s
bind s split-window -v -c "#{pane_current_path}"
bind -n M-s split-window -v -c "#{pane_current_path}"

# swaps
bind-key -r "<" swap-window -t -1
bind-key -r ">" swap-window -t +1

#################
# Pane management
#################

# Swap panes
bind -n M-{ swap-pane -U
bind -n M-} swap-pane -D

# Weird but efficient
bind -n M-'!' swap-pane -t 1
bind -n M-'@' swap-pane -t 2
bind -n M-'#' swap-pane -t 3
bind -n M-'$' swap-pane -t 4
bind -n M-'%' swap-pane -t 5
bind -n M-'^' swap-pane -t 6
bind -n M-'&' swap-pane -t 7
bind -n M-'*' swap-pane -t 8
bind -n M-'(' swap-pane -t 9
bind -n M-')' swap-pane -t 10

# cycling through panes
bind O select-pane -t :.-
bind -n M-Tab select-pane -t :.+
bind -n M-S-Tab select-pane -t :.-

# Remaining metakey bindings
bind -n M-\; last-pane
bind -n M-z resize-pane -Z

# More efficient resizing (fonts tend to be tall, screens tend to be wide)
bind -n M-H resize-pane -L 10
bind -n M-J resize-pane -D 5
bind -n M-K resize-pane -U 5
bind -n M-L resize-pane -R 10

# M-hjkl for pane movement (in case C-hjkl gets locally over-ridden)
bind -n M-h select-pane -L
bind -n M-j select-pane -D
bind -n M-k select-pane -U
bind -n M-l select-pane -R

# C-A hjkl for pane movement (in case M-hjkl gets over-ridden)
bind -r h select-pane -L
bind -r j select-pane -D
bind -r k select-pane -U
bind -r l select-pane -R

#################
# Vim integration
#################

# Smart pane switching with awareness of vim splits
# see https://github.com/christoomey/vim-tmux-navigator
is_vim_or_emacs='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$|emacs.*$"'

bind -n C-h if-shell "$is_vim_or_emacs" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim_or_emacs" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim_or_emacs" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim_or_emacs" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim_or_emacs" "send-keys C-\\" "select-pane -l"

# # Allow us to use C-a C-l for clear screen, etc.
bind C-h send-keys 'C-h'
bind C-j send-keys 'C-j'
bind C-k send-keys 'C-k'
bind C-l send-keys 'C-l'

###########
# clipboard
###########

# TODO: tmux should know if it's in Linux or mac

# Linux
# bind C-c run "tmux save-buffer - / xclip -i -sel clipboard"
# bind C-v run "tmux set-buffer \"$(xclip -o -sel clipboard)\"; tmux paste-buffer"

# Mac
bind-key C-c run-shell 'tmux save-buffer - | pbcopy'
bind-key C-v run-shell 'pbpaste | tmux load-buffer - \; paste-buffer -d'

##################
# Color and Status
##################

source-file ~/dotfiles/tmuxline-snapshot-light.conf

#########
# PLUGINS
#########
#
# These are not so great, maybe get rid of them.
#
# prefix + alt + u remove/uninstall plugins not on the plugin list
#
# git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
# prefix + I to install
# prefix + U to update

### PLUGINS!
# set -g @plugin 'tmux-plugins/tpm'

# # TODO: remove manual configs that are covered by these
# set -g @plugin 'tmux-plugins/tmux-copycat'
# set -g @plugin 'tmux-plugins/tmux-open'
# set -g @plugin 'tmux-plugins/tmux-sensible' # may duplicate some extant settings
# set -g @plugin 'tmux-plugins/tmux-yank'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
# run '~/.tmux/plugins/tpm/tpm'
