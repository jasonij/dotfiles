# tmux.conf, copypasta smorgasbord
#
# Move from M-123... to Command-123... because consistency with browsers
#
# Remove the C-hjkl because you don't use vim as much as you want to use these keys in the shell!
#
# Smart people don't just add whipping cream to things and see what happens.
#
# TODO:
#
# No. 1 thing --> display only active pane directory not program in status bar!
#
# consider mouse mode and mouse mode settings
#
# In copy-mode, quit-and-go-to-previous-pane
#
# How do I break off a window into a new session?
#
# Window indexing in prefix-W is still 0-indexed
#
# Tmux version-sensitive config options (with if-shell, but difficult to use)
#
# Why are my term colors all monkeyed up on ssh'd tmux sessions?
#
# Execute command in all panes in window: setw synchronize-panes on
#
# Is there way to compact windows when you get lika 1, 2, 4, 6 and want 1, 2, 3, 4 ?
#
# I'd like to check that a tmux pane contains the repl I expect before passing a cmd
#
# Figure out moving panes between windows
#   - Grab pane from other window into this window
#   - Bring other window into pane in this window
#   - Move pane from this window into other window
#
# Reattach needs to be not called when not on a Mac
#
# Alias for open directory in new window
#
# C-hjkl bindings in copy-mode
#
# I'd like prefix-HJKL for full splits a la Vim (resize will need different keys)
#
# Consider auto-conneect to existing session (but how to select)
#
# I really want a key binding to rename the window to the current directory or git repo
#
# Get prefix-s tmuxd prefix-w sorted out (they're really inconsistent)
#
# Consider Cmd-{ and Cmd-} for previous and next windows
#
# C-M-i and C-M-o
#
# Get rid of custom C-a s and C-a v, make C-a C-w/s consistent
# Add repeat to C-a n and C-a p
#
# Remove <leader> bindings from dbext
#
# Set up Command-{ and Command-} for previous and next windows
#
# Consider C-s and C-S should select session instead of splitting windows

#############
# tmux basics
#############

# unbind default prefix key (conflicts with vim)
unbind C-b

# set prefix key to ctrl-space
# I used to use C-a but I use that so often I don't want it overloaded
set -g prefix C-a
set -g prefix2 C-Space

# pass through a ctrl-a if you press it twice
bind C-a send-prefix
bind a last-window

# start first window and pane at 1, not zero (the keyboard is not semantic)
set -g base-index 1
set -g pane-base-index 1

# Control arrows
# set-option -gw xterm-keys on

######################
# Things from sensible
######################

setw -g mode-keys vi
set -g status-keys emacs

set -s escape-time 0
set -g history-limit 50000
set -g display-time 4000
set -g status-interval 5

# Still necessary on Macs
set -g default-command "reattach-to-user-namespace -l $SHELL"

# set -g default-terminal "alacritty"
set-option -g default-terminal "screen-256color"
set-option -ga terminal-overrides ",*256col*:Tc"  # True Color

# Allow neovim (and presumably vim?) to change the cursor in insert mode
set -ga terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'

set -g focus-events on
setw -g aggressive-resize on

bind-key R source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"

bind -r C-p previous-window
bind -r C-n next-window

####################
# Session management
####################

bind C-s choose-session

###################
# Window management
###################

# For older TMUX, try :%s/#{pane_current_path}/$PWD/g

# This is way too long, how do we get everything after the slash?
# set -g automatic-rename-format '#{pane_current_path}'

# This is annoying
set-option -g allow-rename off

bind C-w choose-window

# c  create window
bind c neww -c "#{pane_current_path}"
bind -n C-M-c neww -c "#{pane_current_path}"

# n  next window
bind -n C-M-n next-window

# p  previous window
bind -n C-M-p previous-window

# TODO: either kill these or escape them so you can use prefix M-1 in nested sessions
# This clashes with Spacemacs but it's so useful
bind -n M-1 select-window -t 1
bind -n M-2 select-window -t 2
bind -n M-3 select-window -t 3
bind -n M-4 select-window -t 4
bind -n M-5 select-window -t 5
bind -n M-6 select-window -t 6
bind -n M-7 select-window -t 7
bind -n M-8 select-window -t 8
bind -n M-9 select-window -t 9
bind -n M-0 select-window -t 10

bind -n M-\\ last-window
bind M-\\ send-keys M-\

# vim-like splits
unbind v
bind v split-window -h -c "#{pane_current_path}"
bind V split-window -hb -c "#{pane_current_path}"
bind -n M-v split-window -h -c "#{pane_current_path}"
bind -n M-V split-window -hb -c "#{pane_current_path}"

unbind s
bind s split-window -v -c "#{pane_current_path}"
bind S split-window -vb -c "#{pane_current_path}"
bind -n M-s split-window -v -c "#{pane_current_path}"
bind -n M-S split-window -vb -c "#{pane_current_path}"

# Full splits, similar to vim with without also moving current pane there
# TODO: consider also moving current pane there a la vim
# Q: Then where would you put the full width splits?
bind H split-window -fhb -c "#{pane_current_path}"
bind J split-window -fv -c "#{pane_current_path}"
bind K split-window -fvb -c "#{pane_current_path}"
bind L split-window -fh -c "#{pane_current_path}"

##########################
# Things from pane control
##########################

# nav
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# move (the only commands with repeat enabled)
# Q: is there a swap-window command?
bind -r "<" swap-window -t -1
bind -r ">" swap-window -t +1

# split
# TODO: mod these, they are just not semantic wrt shift
bind "|" split-window -h -c "#{pane_current_path}"
bind "\\" split-window -fh -c "#{pane_current_path}"

bind "-" split-window -v -c "#{pane_current_path}"
bind "_" split-window -fv -c "#{pane_current_path}"

bind "%" split-window -h -c "#{pane_current_path}"
bind '"' split-window -v -c "#{pane_current_path}"

# new
bind "c" new-window -c "#{pane_current_path}"

#################
# Pane management
#################

# /Users/jkroll/.tmux.conf:195: usage: unbind-key [-an] [-T key-table] key
unbind -T copy-mode-vi C-j
unbind -T copy-mode-vi C-h

# Unnecessary because of editor/tmux integration code below
# bind -c C-h select-pane -L
# bind -c C-j select-pane -D
# bind -c C-k select-pane -U
# bind -c C-l select-pane -R

# cycling through panes
bind O select-pane -t :.-
bind -n M-Tab select-pane -t :.+
bind -n C-M-y select-pane -t :.-

# M-hjkl for pane movement (in case C-hjkl gets locally over-ridden)
bind -n M-h select-pane -L
bind -n M-j select-pane -D
bind -n M-k select-pane -U
bind -n M-l select-pane -R

# Swap panes (like xmonad)
bind -n M-\{ swap-pane -U
bind -n M-\} swap-pane -D

# More efficient resizing (fonts tend to be tall, screens tend to be wide)
bind -n M-H resize-pane -L 10
bind -n M-J resize-pane -D 5
bind -n M-K resize-pane -U 5
bind -n M-L resize-pane -R 10

# Weird but efficient
bind -n M-'!' swap-pane -t 1
bind -n M-'@' swap-pane -t 2
bind -n M-'#' swap-pane -t 3
bind -n M-'$' swap-pane -t 4
bind -n M-'%' swap-pane -t 5
bind -n M-'^' swap-pane -t 6
bind -n M-'&' swap-pane -t 7
bind -n M-'*' swap-pane -t 8
bind -n M-'(' swap-pane -t 9
bind -n M-')' swap-pane -t 10

# Zoom zoom zoom zoom zoom zoom zoom zoom
bind -n M-z resize-pane -Z

#################
# Vim integration
#################

# Smart pane switching with awareness of vim splits
# see https://github.com/christoomey/vim-tmux-navigator
is_vim_or_emacs='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$|emacs.*$"'

bind -n C-h if-shell "$is_vim_or_emacs" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim_or_emacs" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim_or_emacs" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim_or_emacs" "send-keys C-l" "select-pane -R"
bind -n C-\\ if-shell "$is_vim_or_emacs" "send-keys C-\\" "select-pane -l"

# # Allow us to use C-a C-l for clear screen, etc.
bind C-h send-keys 'C-h'
bind C-j send-keys 'C-j'
bind C-k send-keys 'C-k'
bind C-l send-keys 'C-l'

###########
# clipboard
###########

# TODO: determine if on Mac or Linux (see sensible)

# Linux
# bind C-c run "tmux save-buffer - / xclip -i -sel clipboard"
# bind C-v run "tmux set-buffer \"$(xclip -o -sel clipboard)\"; tmux paste-buffer"

# Mac
bind-key C-c run-shell 'tmux save-buffer - | pbcopy'
bind-key C-v run-shell 'pbpaste | tmux load-buffer - \; paste-buffer -d'

##################
# Color and Status
##################

source-file ~/dotfiles/tmuxline-snapshot-dark.conf
