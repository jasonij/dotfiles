# tmux.conf, copypasta smorgasbord
#
# Smart people don't just add whipping cream to things and see what happens.
#
# TODO
#
# consider mouse mode and mouse mode settings like
# https://mkaz.com/2012/07/27/tmux-terminal-multiplexer/
#
# Get M-S-Tab to work
# Get C-Tab to start working again too (on Mac)
# iTerm 2 mapped C-Tab to alternate through tabs. So angry!
#
# I think I'd like C-Tab for vim/pane and M-Tab for windows
#
# No. 1 thing --> display only active pane directory not program in status bar!
#
# Possibly C-? for pane operations, M-? for windows operations
#
# Get C-4 and C-Tab and C-S-Tab to jive with vim-tmux-navigator
#
# <prefix>' for 1/3 height terminal
#
# Turn off renaming and have an alias for rename to dirname
#
# M-; for previous pane?
#
# M-n and M-p are not great because those are already Emacs bindings
# Let's make sure we don't write over common Emacs bindings, it's just not sensible
# And look out for paredit/sexp Meta mappings as well.
#
# M-S-hjkl for swapping perhaps? tmux may not support this cleanly
#
# Need to figure out good window-switching though
#
# And stop overwriting the typical Emacs keys from my tmux
#
# M-S-hjkl unused (cannot do directional swap)
#
# M-[ and M-] also available (maybe as substitute for next-window, prev-window or next-pane prev-pane)
#
# next-pane would be more consistent
#
# Really the M-<key> can be overdone, use it for frequent ops, not raw laziness for no purpose
#
# Put power status in tmux? Is that awesome?
#
# I need an "exit this mode and jump back to the first pane" shortcut
#
# The Meta-<key> shortcuts are most useful for commands you tend to repeat
#
# It would be nice if M-[ and M-] worked; M-[ would be really nice
#
# What about M-<SPC>? Either as tmux prefix or for something else useful?
#
# tmuxline should be able to indicate fullscreen zoom with * or something
#
# TODO: https://gist.github.com/andreyvit/2921703
# Go through the tmux cheatsheet and get more hotkeys
#
# Hotkey to pop up bottom third window
#
# Can we get M-[ to work for C-a [ ?
#
# In copy-mode, quit-and-go-to-previous-pane
#
# C-M l and h for swap window with previous and next?
#
# C-i to pop us ultimately back into vim pane?
#
# Let's give more characters for window name
#
# How do I break off a window into a new session?
#
# Window indexing in prefix-W is 0-indexed
#
# I like the 2/3rds 1/3rd layout, can I configure that off the bat somehow?


#############
# tmux basics
#############

# unbind default prefix key (conflicts with vim)
unbind C-b

# set prefix key to ctrl-a
set -g prefix C-a

# pass through a ctrl-a if you press it twice
bind C-a send-prefix

# no command delay -- to fix problem escaping in neovim
set -g escape-time 0

# start first window and pane at 1, not zero (the keyboard is not semantic)
set -g base-index 1
set -g pane-base-index 1

# what does this actually do? I don't remember
set-option -gw xterm-keys on

# TRUECOLOR
#set-option -ga terminal-overrides ",xterm-256color:Tc"

# Q: should I change this at all for TRUECOLOR?
# turn on 256 color support in tmux
set -g default-terminal "screen-256color"

# history limit 10000
set -g history-limit 10000

# bind r to reloading the config file
bind r source-file ~/.tmux.conf \; display "Reloaded tmux config file."


################
# Copy and paste
################

bind-key -t vi-copy 'v' begin-selection
bind-key -t vi-copy 'y' copy-selection
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# This stopped(?) working
# bind-key -t vi-copy Tab "select-pane -l"


####################
# Session management
####################

bind S choose-session
bind -n M-S choose-session


###################
# Window management
###################

# c  create window
bind c neww -c "#{pane_current_path}"
bind -n M-c neww -c "#{pane_current_path}"
bind -n M-C neww -c "#{pane_current_path}"

# w  list windows
bind -n M-w choose-window

# n  next window
bind -n C-M-n next-window

# p  previous window
bind -n C-M-p previous-window

# f  find window

# M-,?
# ,  name window
#bind -n M-\, name-window

# Maybe x for pane and X for window?
# &  kill window

# bind -n M-1 select-pane -t 1
# bind -n M-2 select-pane -t 2
# bind -n M-3 select-pane -t 3
# bind -n M-4 select-pane -t 4
# bind -n M-5 select-pane -t 5
# bind -n M-6 select-pane -t 6
# bind -n M-7 select-pane -t 7
# bind -n M-8 select-pane -t 8
# bind -n M-9 select-pane -t 9
# bind -n M-0 select-pane -t 10

bind -n C-M-1 select-window -t 1
bind -n C-M-2 select-window -t 2
bind -n C-M-3 select-window -t 3
bind -n C-M-4 select-window -t 4
bind -n C-M-5 select-window -t 5
bind -n C-M-6 select-window -t 6
bind -n C-M-7 select-window -t 7
bind -n C-M-8 select-window -t 8
bind -n C-M-9 select-window -t 9
bind -n C-M-0 select-window -t 10

bind -n M-\ last-window

#############################
# Window splitting into panes
#############################

# vertical split (as per vim)
bind % split-window -h -c "#{pane_current_path}"
bind | split-window -h -c "#{pane_current_path}"
bind v split-window -h -c "#{pane_current_path}"
# bind -n M-v split-window -h -c "#{pane_current_path}"

# horizontal split (as per vim)
bind "\"" split-window -v -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
unbind s
bind s split-window -v -c "#{pane_current_path}"
# bind -n M-s split-window -v -c "#{pane_current_path}"


#################
# Pane management
#################

# The problem is, we're halfway between linux console and xmonad
# I think an important principle is that tmux is tmux, vim is vim, etc.
# With the exception that I like consistent splitting terminology
# General principle: M-key is analogous to prefix-key

bind -n M-q display-panes

bind -n M-z resize-pane -Z

# Swap panes
bind -n M-{ swap-pane -U
bind -n M-} swap-pane -D

# Weird but efficient
# Actually, is swapping panes by id an anti-pattern?
bind -n M-'!' swap-pane -t 1
bind -n M-'@' swap-pane -t 2
bind -n M-'#' swap-pane -t 3
bind -n M-'$' swap-pane -t 4
bind -n M-'%' swap-pane -t 5
bind -n M-'^' swap-pane -t 6
bind -n M-'&' swap-pane -t 7
bind -n M-'*' swap-pane -t 8
bind -n M-'(' swap-pane -t 9
bind -n M-')' swap-pane -t 10

# Shift movement keys will resize panes
bind -r H resize-pane -L 10
bind -r J resize-pane -D 10
bind -r K resize-pane -U 10
bind -r L resize-pane -R 10

# More efficient resizing
bind -n M-H resize-pane -L 10
bind -n M-J resize-pane -D 10
bind -n M-K resize-pane -U 10
bind -n M-L resize-pane -R 10

#################
# Pane navigation
#################

# navigate using vim-style keys
setw -g mode-keys vi

# o for forwards, O for backwards
bind O select-pane -t :.-
bind -n M-O select-pane -t :.-
bind -n M-o select-pane -t :.+

bind -n M-\; last-pane

# also use M-Tab to cycle through panes
bind -n M-Tab select-pane -t :.+

# for orthogonality with vim
# This may not be necessary, try C-M-i
bind -n M-i select-pane -t :.+

# this isn't all that important and I can't get vim to go along with it
bind -n M-I select-pane -t :.-

# why doesn't this work?
bind -n M-S-Tab select-pane -t :.-

# use C-Tab to cycle through panes
# Q: why did this break on Mac?
# A: iTerm2 uses C-Tab to cycle through tabs
# TODO: reenable C-Tab and C-S-Tab
# bind -n C-Tab select-pane -t :.+
# bind -n C-S-Tab select-pane -t :.-

# Alt-hjkl for pane movement (in case C-hjkl gets locally over-ridden)
bind -n M-h select-pane -L
bind -n M-j select-pane -D
bind -n M-k select-pane -U
bind -n M-l select-pane -R

# C-A hjkl for pane movement (in case M-hjkl gets over-ridden)
bind -r h select-pane -L
bind -r j select-pane -D
bind -r k select-pane -U
bind -r l select-pane -R


#################
# Vim integration
#################

# Smart pane switching with awareness of vim splits
# see https://github.com/christoomey/vim-tmux-navigator
# TODO (if possible) fix the back behavior for C-Tab and C-S-Tab
# is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
# bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
# bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
# bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
# bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
# bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# # Allow us to use C-a C-l for clear screen, etc.
# bind C-h send-keys 'C-h'
# bind C-j send-keys 'C-j'
# bind C-k send-keys 'C-k'
# bind C-l send-keys 'C-l'

# Cursor shape
# TODO: verify if necessary
# set -g -a terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'

###########
# clipboard
###########

# TODO: tmux should know if it's in Linux or mac

# Linux
# bind C-c run "tmux save-buffer - / xclip -i -sel clipboard"
# bind C-v run "tmux set-buffer \"$(xclip -o -sel clipboard)\"; tmux paste-buffer"

# Mac
bind-key C-c run-shell 'tmux save-buffer - | pbcopy'
bind-key C-p run-shell 'tmux save-buffer - | pbpaste'


##################
# Color and Status
##################

source-file ~/dotfiles/tmuxline-snapshot-dark.conf

#########
# PLUGINS
#########

# git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
# prefix + I to install
# prefix + U to update
# prefix + alt + u remove/uninstall plugins not on the plugin list

# List of plugins
set -g @plugin 'tmux-plugins/tpm'

# TODO: submit fix to tmux copycat or tmux-open whichever to support oh-my-zsh

# TODO: remove manual configs that are covered by these
set -g @plugin 'tmux-plugins/tmux-battery'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'tmux-plugins/tmux-sensible' # may duplicate some extant settings
set -g @plugin 'tmux-plugins/tmux-yank'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
